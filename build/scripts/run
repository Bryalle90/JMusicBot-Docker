#!/bin/bash
SOURCE=${BASH_SOURCE[0]}
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  DIR=$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )
  SOURCE=$(readlink "$SOURCE")
  [[ $SOURCE != /* ]] && SOURCE=$DIR/$SOURCE # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
SOURCE_DIR=$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )

# Source Repo: https://github.com/jagrosh/MusicBot

# This will have this script check for a version of JMusicBot every
# startup (and download it if the version isn't currently downloaded)
DOWNLOAD="${AUTO_DOWNLOAD:-true}"

# Use a specific version
VERSION="${USE_VERSION:-latest}"

NOTIFY="${UPDATE_NOTIFY:-true}"

RELEASE_API_URL="https://api.github.com/repos/jagrosh/MusicBot/releases"
RELEASE_API_CONTENT=$( curl -s "$RELEASE_API_URL" )

SAMPLE_CONF_URL="https://jmusicbot.com/config/"

PL_DIR="/playlists"
JAR_DIR="/jars"
CONF_DIR="/conf"

function mod_conf() {
    # Link config.txt
    if [ -w "$CONF_DIR/config.txt" ]; then
        if [ -w "$SOURCE_DIR/config.txt" ]; then    # both confs exist
            rm -f "$SOURCE_DIR/config.txt"
        fi
    else
        if [ ! -d "$CONF_DIR" ]; then mkdir -p "$CONF_DIR" && chmod 0666 "$CONF_DIR"; fi
        if [ -w "$SOURCE_DIR/config.txt" ]; then    # only source conf exists
            mv "$SOURCE_DIR/config.txt" "$CONF_DIR/config.txt"
        else
            echo """$( curl "$SAMPLE_CONF_URL" )""" |\
                sed 's|&quot;|"|g' | sed 's|&#39;|'\''|g' |\
                awk '/<code>/,/<\/code>/' |\
                sed '1d;$d' > "$CONF_DIR/config.txt"
        fi
        chmod 0666 "$CONF_DIR/config.txt"
    fi
    ln -s "$CONF_DIR/config.txt" "$SOURCE_DIR/config.txt"

    # Link settings .json
    if [ -w "$CONF_DIR/serversettings.json" ]; then
        if [ -w "$SOURCE_DIR/serversettings.json" ]; then    # both confs exist
            rm -f "$SOURCE_DIR/serversettings.json"
        fi
    else
        if [ ! -d "$CONF_DIR" ]; then mkdir -p "$CONF_DIR" && chmod 0666 "$CONF_DIR"; fi
        if [ -w "$SOURCE_DIR/serversettings.json" ]; then    # only source conf exists
            mv "$SOURCE_DIR/serversettings.json" "$CONF_DIR/serversettings.json"
        else                                                 # no confs exist
            touch "$CONF_DIR/serversettings.json" && echo "{}" >> "$CONF_DIR/serversettings.json"
        fi
        chmod 0666 "$CONF_DIR/serversettings.json"
    fi
    ln -s "$CONF_DIR/serversettings.json" "$SOURCE_DIR/serversettings.json"

    # Set token and owner
    sed -i "s/\(token =\).*/\1 ${BOT_TOKEN}/" "$CONF_DIR/config.txt"
    sed -i "s/\(owner =\).*/\1 ${BOT_OWNER}/" "$CONF_DIR/config.txt"

    # Set playlist folder
    if [ ! -d "$PL_DIR" ]; then mkdir -p "$PL_DIR" && chmod 0666 "$PL_DIR"; fi
    sed -i "s|\(playlistsfolder =\).*|\1 \"${PL_DIR}\"|" "$CONF_DIR/config.txt"

    # Set update notification
    sed -i "s|\(updatealerts=\).*|\1${NOTIFY}|" "$CONF_DIR/config.txt"
}

function get_releases() {
    local res=""
    local -a releases=()

    res=$( echo "$RELEASE_API_CONTENT" | jq -c '.[].tag_name' | sed -e 's/^"//' -e 's/"$//' )
    for release in $res; do 
        releases+=("$release")
    done

    echo "${releases[@]}"
}

function get_latest() {
    local -a releases=()

    for release in $( get_releases ); do 
        releases+=("$release")
    done

    echo "${releases[0]}"
}

function get_download_url() {
    local release="$1"

    [[ "$release" == "latest" ]] && release=$( get_latest )
    echo "$RELEASE_API_CONTENT" | jq -c ".[] | select(.tag_name == \"$release\") | .assets[].browser_download_url" | sed -e 's/^"//' -e 's/"$//'
}

function is_valid_release() {
    local release="$1"
    [[ "latest" == "$release" ]] && return 0
    for r in $( get_releases ); do 
        [[ "$r" == "$release" ]] && return 0
    done
    return 1
}

function get_url() {
    local url=""

    is_valid_release "$VERSION"
    if [ $? ]; then url="$( get_download_url "$VERSION" )"; else url=""; fi

    echo "$url"
}

function get_filename() {
    echo "$1" | sed 's/.*\/\([^\/]*\)/\1/'
}

function download() {
    local url="$1"
    local file=""

    file="$(get_filename "$url")"

    if [ ! -d "$JAR_DIR" ]; then mkdir -p "$JAR_DIR" && chmod 0666 "$JAR_DIR"; fi
    curl -L "$url" -o "$JAR_DIR/$file" && chmod 0777 "$JAR_DIR/$file" && return 0
    return 1
}

function file_exists() {
    local file=""
    file="$1"
    [[ -f "$file" ]] && return 0 || return 1
}

function get_file() {
    local url=""

    url="$( get_url )"
    [[ "$DOWNLOAD" == "true" ]] && [ "$url" ] && { file_exists "$JAR_DIR/$( get_filename "$url" )" || { download "$url" || return 1; }; }
    return 0
}

function run() {
    local file=""
    file="$( find "$JAR_DIR" -maxdepth 1 -name "$( get_filename "$(get_url)" )" )"
    java -Dnogui=true -jar "$file" || return 1
    return 0
}

printf '%s\n' "AUTO_DOWNLOAD: $DOWNLOAD"
printf '%s\n' "VERSION: $VERSION"

if [ ! "${BOT_TOKEN}" == "" ] && [ ! "${BOT_OWNER}" == "" ]; then
    mod_conf || { printf '%s\n' "Error setting conf" && exit 1; }
else
    printf '%s\n' "Set the environment variables for BOT_TOKEN and BOT_OWNER"
    printf '%s\n' "See https://jmusicbot.com/getting-a-bot-token/"
    exit 1
fi

# Set perms
if [ -d "./supervise" ]; then chmod 0777 supervise; fi

# Get jar
get_file || { printf '%s\n' "Error downloading ..." && exit 1; }

# Run bot
run || { printf '%s\n' "Bot error ..." && exit 1; }

exit 0